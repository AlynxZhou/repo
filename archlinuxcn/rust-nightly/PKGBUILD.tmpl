# Maintainer: lilydjwg <lilydjwg@gmail.com>
{% autoescape None %}
pkgname=(rust-nightly
         rustfmt-nightly
         cargo-nightly
         rust-clippy-nightly
         rust-analyzer-nightly
         rust-miri-nightly
         rust-src-nightly
         rust-docs-nightly{% for x in stds %}
         {{ x.name }}{% end %}
        )
pkgver={{version + '_' + version_date}}
pkgrel=1
epoch=4
pkgdesc="A safe, concurrent, practical language from Mozilla (nightly version)"
arch=('i686' 'x86_64')
url="https://www.rust-lang.org/"
license=('MIT' 'Apache')
validpgpkeys=('108F66205EAEB0AAA8DD5E1C85AB96E6FA1BE5FE')
makedepends=('git')
source=(
        'https://static.rust-lang.org/dist/{{version_date_raw}}/rust-nightly-x86_64-unknown-linux-gnu.tar.xz'
        'https://static.rust-lang.org/dist/{{version_date_raw}}/rust-nightly-x86_64-unknown-linux-gnu.tar.xz.asc'
        'https://static.rust-lang.org/dist/{{version_date_raw}}/rust-src-nightly.tar.xz'
        'https://static.rust-lang.org/dist/{{version_date_raw}}/rust-src-nightly.tar.xz.asc'
        '{{ clippy_url }}'
        '{{ clippy_url }}.asc'
{% for x in stds %}
        {{ "'%s'" % x.url }}
        {{ "'%s.asc'" % x.url }}{% end %}
        'git+https://github.com/rust-lang/zsh-config')
sha512sums=({% for _ in range(7 + len(stds) * 2) %}
            'SKIP'{% end %})

build() {
  true
}

_copy_files () {
  _name=$1

  mkdir -p "$pkgdir/usr"
  cp -r bin share "$pkgdir/usr"

  mkdir -p "$pkgdir/usr/share/licenses/$pkgname"
  mv "$pkgdir/usr/share/doc/$_name/"LICENSE* "$pkgdir/usr/share/licenses/$pkgname/"
  mv "$pkgdir/usr/share/doc/$_name" "$pkgdir/usr/share/doc/$pkgname"

  if [[ -d etc/bash_completion.d ]]; then
    mkdir "$pkgdir/usr/share/bash-completion"
    cp -r etc/bash_completion.d "$pkgdir/usr/share/bash-completion/completions"
  fi

  if [[ -d libexec ]]; then
    mkdir "$pkgdir/usr/lib"
    cp -r libexec/* "$pkgdir/usr/lib"
  fi
  hardlink "$pkgdir"
}

package_rust-nightly() {
  depends=("rust-std-nightly-$CARCH-unknown-linux-gnu=$epoch:$pkgver")
  optdepends=('rust-docs-nightly: language and API documentation'
              'rust-src-nightly: source code'
              'vim-rust-git: support for Vim'
{% for x in stds %}
              {{ "'%s: cross compile for %s'" % (x.name, x.target) }}{% end %}
              'cargo-nightly: Rust package manager')
  provides=(rust={{version}})
  conflicts=(rust)
  options=(!strip)

  install -Dm644 "$srcdir"/zsh-config/_rust "$pkgdir/usr/share/zsh/site-functions/_rust"

  cd rust-nightly-$CARCH-unknown-linux-gnu
  ./install.sh --destdir="$pkgdir" --prefix=/usr --disable-ldconfig --components=rustc
  rm "$pkgdir"/usr/lib/rustlib/{components,manifest-*,rust-installer-version,install.log,uninstall.sh}

  mv "$pkgdir"/usr/libexec/* "$pkgdir"/usr/lib/
  rm -r "$pkgdir"/usr/libexec
  rm -rf "${pkgdir}/usr/src/debug"

  rm -r "$pkgdir/usr/share/doc"
  cd "$pkgdir"/usr/lib
  for so in *.so; do
    if [[ $so != libstd-* && $so != libtest-* ]]; then
      continue
    fi
    rm $so
    ln -s rustlib/"$CARCH"-unknown-linux-gnu/lib/$so .
  done
  hardlink "$pkgdir"
}

package_rust-docs-nightly() {
  pkgdesc="A safe, concurrent, practical language from Mozilla. (Language and API documentation, for nightly version)"
  arch=('any')
  options=('!strip')
  optdepends=('rust-nightly: to compile and run the programs you can write using this documentation')
  provides=('rust-doc={{version}}')
  conflicts=('rust-doc')

  cd rust-nightly-$CARCH-unknown-linux-gnu/rust-docs
  mkdir -p "$pkgdir/usr"
  cp -r share "$pkgdir/usr"
  hardlink "$pkgdir"
}

package_rustfmt-nightly() {
  pkgdesc="A safe, concurrent, practical language from Mozilla. (rustfmt formatter, for nightly version)"
  provides=('rustfmt={{rustfmt_version}}')
  conflicts=('rustup')
  depends=("rust-nightly=$epoch:$pkgver")

  cd rust-nightly-$CARCH-unknown-linux-gnu/rustfmt-preview
  _copy_files rustfmt
}

package_rust-clippy-nightly() {
  pkgdesc="A collection of lints to catch common mistakes and improve your Rust code (nightly version)"
  provides=('rust-clippy={{clippy_version}}')
  conflicts=('rustup')
  depends=("rust-nightly=$epoch:$pkgver")

  cd rust-nightly-$CARCH-unknown-linux-gnu/clippy-preview
  _copy_files clippy
}

package_rust-analyzer-nightly() {
  pkgdesc="Rust compiler front-end for IDEs (nightly version)"
  provides=('rust-analyzer')
  conflicts=('rustup' 'rust-analyzer')
  depends=("rust-nightly=$epoch:$pkgver")
  optdepends=('rust-src')

  cd rust-nightly-$CARCH-unknown-linux-gnu/rust-analyzer-preview
  _copy_files rust-analyzer
}

package_rust-miri-nightly() {
  pkgdesc="An interpreter for Rust's mid-level intermediate representation (nightly version)"
  provides=('rust-miri={{miri_version}}')
  conflicts=('rustup')
  depends=("rust-nightly=$epoch:$pkgver")

  cd rust-nightly-$CARCH-unknown-linux-gnu/miri-preview
  _copy_files miri
}

package_cargo-nightly() {
  pkgdesc="Rust package manager (nightly version)"
  depends=('rust-nightly')
  provides=('cargo={{cargo_version}}')
  conflicts=('rustup')

  cd rust-nightly-$CARCH-unknown-linux-gnu/cargo
  _copy_files cargo
}

package_rust-src-nightly() {
  pkgdesc="A safe, concurrent, practical language from Mozilla. (Source code, for nightly version)"
  arch=('any')
  options=('!strip')
  optdepends=('rust-nightly')
  provides=('rust-src={{version}}')
  conflicts=('rust-src')

  cd rust-src-nightly/rust-src
  mkdir -p "$pkgdir/usr"
  cp -r lib "$pkgdir/usr"
  hardlink "$pkgdir"
}

{% for x in stds %}
package_{{x.name}}(){
  pkgdesc="A safe, concurrent, practical language from Mozilla. (standard library, for nightly version, for (cross-)compiling to and running on {{x.target}})"
  arch=('any')
  options=('!strip' 'staticlibs')
{% if x.optdepends %}
  optdepends=({{' '.join("'%s'" % y for y in x.optdepends)}}){% end %}
{% if x.provides %}
  provides=({{' '.join("'%s'" % y for y in x.provides)}}){% end %}

  cd {{x.name}}
  chmod +x install.sh{# Windows one isn't executable #}
  sed -i 's/\r//g' install.sh{# Windows one is of CRLF-lines #}
  ./install.sh --destdir="$pkgdir" --prefix=/usr --disable-ldconfig
  rm "$pkgdir"/usr/lib/rustlib/{components,manifest-*,rust-installer-version,install.log,uninstall.sh}
  find "$pkgdir"/usr/lib -name '*.so' -exec chmod +x {} +

  mkdir -p "$pkgdir/usr/share/"{doc,licenses}"/$pkgname"
  cp COPYRIGHT LICENSE-* "$pkgdir/usr/share/licenses/$pkgname"
  cp README.md "$pkgdir/usr/share/doc/$pkgname"
  hardlink "$pkgdir"
}
{% end %}{# vim: se ft=tornadotmpl syntax=sh.tornadotmpl: #}
